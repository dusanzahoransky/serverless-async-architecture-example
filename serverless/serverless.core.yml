service: Ota1RealTimeUpdates

provider:
  ${tfile:../node_modules/@rezdy/serverless/provider/nodejs.yml}:
  environment:
    ENV: ${self:provider.stage}
    API_OTA1_PRIVATE_KEY_REALTIME_UPDATES: ${ssm:/api/${opt:stage}/api-ota1/API_OTA1_PRIVATE_KEY_REALTIME_UPDATES~true}
    API_OTA1_COMPANY_ID: ${ssm:/api/${opt:stage}/api-ota1/API_OTA1_COMPANY_ID}
    
functions:
  OrderStatusUpdated:
    handler: com.rezdy.ot1.relatimeupdates.OrderStatusUpdated
    timeout: 10 #a first call after a cold start might take a bit longer
    environment:
    events:
    - sqs:
        batchSize: 1  #keep as 1 if not processed as batch
        arn:
          Fn::ImportValue: sns-${self:provider.stage}-SnsOrderUpdated

resources:
  Resources:
    #SQS Ota1OrderStatusUpdated
    ${tfile:../node_modules/@rezdy/serverless/resources/sqsQueue.yml:queueName=ApiOta1OrderStatusUpdated,delaySeconds=0}:
    ${tfile:../node_modules/@rezdy/serverless/resources/snsSqsSubscriptionPolicySingleTopic.yml:subscriptionName=SqsOrderStatusUpdatedPolicy,queueName=ApiOta1OrderStatusUpdated,topicName=sns-${self:provider.stage}-SnsOrderUpdated}:

    #subscription SQS Ota1OrderStatusUpdated to SNS OrderUpdatedTopicSubscription
    ${tfile:../node_modules/@rezdy/serverless/resources/snsSqsSubscription.yml:queueName=ApiOta1OrderStatusUpdated,topicName=sns-${self:provider.stage}-SnsOrderUpdated,subscriptionName=OrderUpdatedTopicSubscription}:
        FilterPolicy:
          event:
          - "ORDER_STATUS_UPDATED"
          resellerId:
          - ${self:provider.environment.API_OTA1_COMPANY_ID}

