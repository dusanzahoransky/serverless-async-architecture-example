# Generated by https://www.npmjs.com/package/reusable-serverless-template.
# Do not edit this file directly but serverless.js.

service: OTA 1 real-time updates

provider:
  name: aws
  runtime: nodejs8.10
  profile: test
  stage: test
  region: ap-southeast-2
  memorySize: 512
  environment:
    ENV: ${self:provider.stage}
    API_OTA1_PRIVATE_KEY_REALTIME_UPDATES: ${ssm:/api/test/api-ota1/API_OTA1_PRIVATE_KEY_REALTIME_UPDATES~true}
    API_OTA1_COMPANY_ID: ${ssm:/api/test/api-ota1/API_OTA1_COMPANY_ID}
    
functions:
  OrderStatusUpdated:
    handler: com.rezdy.ot1.relatimeupdates.OrderStatusUpdated
    timeout: 10 #a first call after a cold start might take a bit longer
    environment:
    events:
    - sqs:
        batchSize: 1  #keep as 1 if not processed as batch
        arn:
          Fn::ImportValue: sns-${self:provider.stage}-SnsOrderUpdated

resources:
  Resources:
    #SQS Ota1OrderStatusUpdated
    ApiOta1OrderStatusUpdated:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: ${self:provider.stage}-ApiOta1OrderStatusUpdated
        DelaySeconds: 0
        VisibilityTimeout: 30
        RedrivePolicy:
          deadLetterTargetArn:
            Fn::GetAtt: [ DeadApiOta1OrderStatusUpdated, "Arn" ]
          maxReceiveCount: 1
    
    DeadApiOta1OrderStatusUpdated:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: ${self:provider.stage}-DeadApiOta1OrderStatusUpdated
        MessageRetentionPeriod: 604800 #7 days, should be enough time to fix an issue and retry the messages again in case of a critical issue
    
    AlarmApiOta1OrderStatusUpdated:
      Type: "AWS::CloudWatch::Alarm"
      Properties:
        AlarmDescription: "AlarmApiOta1OrderStatusUpdated number of messages is over the limit"
        Namespace: "SQS/Queue"
        MetricName: "ApproximateNumberOfMessagesVisible"
        ComparisonOperator: "GreaterThanThreshold"
        Threshold: 100
        Period: 300
        Dimensions:
        - Name: "QueueName"
          Value:
            Ref: "ApiOta1OrderStatusUpdated"
        Statistic: "Average"
        EvaluationPeriods: 3
        AlarmActions: [ "${self:custom.sns.${self:provider.stage}.devAlertsTopic}" ]
        OKActions: [ "${self:custom.sns.${self:provider.stage}.devAlertsTopic}" ]
    
    AlarmDeadApiOta1OrderStatusUpdated:
      Type: "AWS::CloudWatch::Alarm"
      Properties:
        AlarmDescription: "AlarmDeadApiOta1OrderStatusUpdated number of received messages is over the limit"
        Namespace: "SQS/DeadLetterQueue"
        MetricName: "NumberOfMessagesReceived"
        ComparisonOperator: "GreaterThanThreshold"
        Threshold: 100
        Period: 300
        Dimensions:
        - Name: "QueueName"
          Value:
            Ref: "DeadApiOta1OrderStatusUpdated"
        Statistic: "Average"
        EvaluationPeriods: 3
        AlarmActions: [ "${self:custom.sns.${self:provider.stage}.devAlertsTopic}" ]
        OKActions: [ "${self:custom.sns.${self:provider.stage}.devAlertsTopic}" ]
        
    SqsOrderStatusUpdatedPolicyPolicy:
      Type: "AWS::SQS::QueuePolicy"
      Properties:
        Queues:
        - Ref: ApiOta1OrderStatusUpdated
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Principal: '*'
            Action:
            - SQS:SendMessage
            Resource:
              Fn::GetAtt:
              - ApiOta1OrderStatusUpdated
              - Arn
            Condition:
              ArnEquals:
                'aws:SourceArn': sns-${self:provider.stage}-SnsOrderUpdated

    #subscription SQS Ota1OrderStatusUpdated to SNS OrderUpdatedTopicSubscription
    OrderUpdatedTopicSubscription:
      Type: "AWS::SNS::Subscription"
      Properties:
        Endpoint:
          Fn::GetAtt:
          - ApiOta1OrderStatusUpdated
          - Arn
        Protocol: "sqs"
        TopicArn: sns-${self:provider.stage}-SnsOrderUpdated
        FilterPolicy:
          event:
          - "ORDER_STATUS_UPDATED"
          resellerId:
          - ${self:provider.environment.API_OTA1_COMPANY_ID}


