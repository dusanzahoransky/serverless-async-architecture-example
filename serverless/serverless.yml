# Generated by https://www.npmjs.com/package/serverless-fragments.
# Do not edit this file directly but serverless.js.

service: OTA-1-real-time-updates

provider:
  name: aws
  runtime: nodejs8.10 #java8|nodejs8.10|...
  profile: test       #test|production  - profiles for environments
  stage: test         #test|stage|prod	- environments
  region: ap-southeast-2 #ap-southeast-2|us-west-2|... region has to be explicitly passed as argument, serverless currently can't read it from profile
  memorySize: 512     #default is 1024M, see a real runtime consumption to avoid getting billed for memory which is not used
  environment:
    ENV: ${self:provider.stage}
    API_OTA1_PRIVATE_KEY_REALTIME_UPDATES: ${ssm:/api/test/api-ota1/API_OTA1_PRIVATE_KEY_REALTIME_UPDATES~true}
    API_OTA1_COMPANY_ID: ${ssm:/api/test/api-ota1/API_OTA1_COMPANY_ID}
    
functions:
  OrderStatusUpdated:
    handler: com.rezdy.ot1.relatimeupdates.OrderStatusUpdated
    timeout: 10 #a first call after a cold start might take a bit longer
    environment:
    events:
    - sqs:
        batchSize: 1  #keep as 1 if not processed as batch
        arn:
          Fn::GetAtt: 
            - SqsOta1OrderStatusUpdated
            - Arn

resources:
  Resources:
    #SQS queue
    SqsOta1OrderStatusUpdated:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: ${self:provider.stage}-SqsOta1OrderStatusUpdated
        DelaySeconds: 0
        VisibilityTimeout: 30
        RedrivePolicy:
          deadLetterTargetArn:
            Fn::GetAtt: [ DeadSqsOta1OrderStatusUpdated, "Arn" ]
          maxReceiveCount: 1
    
    #Dead-letter queue for SqsOta1OrderStatusUpdated
    DeadSqsOta1OrderStatusUpdated:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: ${self:provider.stage}-DeadSqsOta1OrderStatusUpdated
        MessageRetentionPeriod: 604800 #7 days, should be enough time to fix an issue and retry the messages again in case of a critical issue
    
    #Cloudwatch Alarm to monitor SqsOta1OrderStatusUpdated
    AlarmSqsOta1OrderStatusUpdated:
      Type: "AWS::CloudWatch::Alarm"
      Properties:
        AlarmDescription: "AlarmSqsOta1OrderStatusUpdated number of messages is over the limit"
        Namespace: "SQS/Queue"
        MetricName: "ApproximateNumberOfMessagesVisible"
        ComparisonOperator: "GreaterThanThreshold"
        Threshold: 100
        Period: 300
        Dimensions:
        - Name: "QueueName"
          Value:
            Ref: "SqsOta1OrderStatusUpdated"
        Statistic: "Average"
        EvaluationPeriods: 3
        AlarmActions: 
          - Fn::ImportValue: sns-${self:provider.stage}-devAlertsTopic
        OKActions:
          - Fn::ImportValue: sns-${self:provider.stage}-devAlertsTopic
    
    #Cloudwatch Alarm to monitor the dead-letter queue
    AlarmDeadSqsOta1OrderStatusUpdated:
      Type: "AWS::CloudWatch::Alarm"
      Properties:
        AlarmDescription: "AlarmDeadSqsOta1OrderStatusUpdated number of received messages is over the limit"
        Namespace: "SQS/DeadLetterQueue"
        MetricName: "NumberOfMessagesReceived"
        ComparisonOperator: "GreaterThanThreshold"
        Threshold: 100
        Period: 300
        Dimensions:
        - Name: "QueueName"
          Value:
            Ref: "DeadSqsOta1OrderStatusUpdated"
        Statistic: "Average"
        EvaluationPeriods: 3
        AlarmActions: 
          - Fn::ImportValue: sns-${self:provider.stage}-devAlertsTopic
        OKActions:
          - Fn::ImportValue: sns-${self:provider.stage}-devAlertsTopic
    
    #Allow SnsOrderUpdated to send message to SqsOta1OrderStatusUpdated
    SqsOrderStatusUpdatedPolicyPolicy:
      Type: "AWS::SQS::QueuePolicy"
      Properties:
        Queues:
        - Ref: SqsOta1OrderStatusUpdated
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Principal: '*'
            Action:
            - SQS:SendMessage
            Resource:
              Fn::GetAtt:
              - SqsOta1OrderStatusUpdated
              - Arn
            Condition:
              ArnEquals:
                'aws:SourceArn': 
                  Fn::ImportValue: sns-${self:provider.stage}-SnsOrderUpdated

    #SqsOta1OrderStatusUpdated to SnsOrderUpdated subscription with filter 
    OrderUpdatedTopicSubscription:
      Type: "AWS::SNS::Subscription"
      Properties:
        Endpoint:
          Fn::GetAtt:
          - SqsOta1OrderStatusUpdated
          - Arn
        Protocol: "sqs"
        TopicArn: 
          Fn::ImportValue: sns-${self:provider.stage}-SnsOrderUpdated
        FilterPolicy:
          event:
          - "ORDER_STATUS_UPDATED"
          resellerId:
          - ${self:provider.environment.API_OTA1_COMPANY_ID}